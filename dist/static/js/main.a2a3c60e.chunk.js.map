{"version":3,"sources":["services/firebase.js","components/Article.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","Article","storage","ref","titre","lien","from","date","split","href","target","rel","App","useState","articles","setArticles","useEffect","collection","get","then","querySnapshot","forEach","doc","data","nom","fetch","response","text","str","window","DOMParser","parseFromString","querySelectorAll","item","querySelector","innerHTML","oldArray","className","map","article","i","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2RAYAA,IAASC,cAVI,CACTC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGCT,IAASU,KAAtB,IACMC,EAAKX,IAASY,YCFZC,GDGQb,IAASc,UACEC,M,MCdlB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAClC,OACI,iCACI,4BAAKH,EAAMI,MAAM,KAAK,GAAGA,MAAM,OAAO,GAAtC,YAAmDF,GACnD,uBAAGG,KAAMJ,EAAMK,OAAO,SAASC,IAAI,uBAAnC,gBACA,2CAAcJ,MCmCXK,MArCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KA0Bb,OAvBAC,qBAAU,WACRjB,EAAGkB,WAAW,OAAOC,MAAMC,MAAK,SAACC,GAE/BA,EAAcC,SAAQ,SAACC,GAAS,IAAD,EACPA,EAAIC,OAAlBlB,EADqB,EACrBA,KAAMmB,EADe,EACfA,IAGdC,MADgBpB,GAEbc,MAAK,SAAAO,GAAQ,OAAIA,EAASC,UAC1BR,MAAK,SAAAS,GAAG,OAAI,IAAIC,OAAOC,WAAYC,gBAAgBH,EAAK,eACxDT,MAAK,SAAAI,GACUA,EAAKS,iBAAiB,QAC9BX,SAAQ,SAAAY,GACZ,IAAM7B,EAAQ6B,EAAKC,cAAc,SAASC,UACpC9B,EAAO4B,EAAKC,cAAc,QAAQC,UAClC5B,EAAO0B,EAAKC,cAAc,WAAWC,UAC3CpB,GAAY,SAAAqB,GAAQ,4BAAQA,GAAR,CAAkB,CAAChC,QAAOC,OAAMmB,MAAKjB,2BAKlE,IAGD,yBAAK8B,UAAU,OACb,0DACCvB,EAASwB,KAAI,SAACC,EAASC,GAAQ,IACtBpC,EAA2BmC,EAA3BnC,MAAOC,EAAoBkC,EAApBlC,KAAMmB,EAAce,EAAdf,IAAKjB,EAASgC,EAAThC,KAC1B,OAAO,kBAAC,EAAD,CAASkC,IAAKD,EAAGpC,MAAOA,EAAOC,KAAMA,EAAMC,KAAMkB,EAAKjB,KAAMA,SCxBvDmC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2a3c60e.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyAcvn9Ovp6VDSDMW8WiXu27hzvdgZIuh3U\",\r\n    authDomain: \"sources-storage.firebaseapp.com\",\r\n    databaseURL: \"https://sources-storage.firebaseio.com\",\r\n    projectId: \"sources-storage\",\r\n    storageBucket: \"sources-storage.appspot.com\",\r\n    messagingSenderId: \"662099457205\",\r\n    appId: \"1:662099457205:web:ef77f8dd882d1539cc3afc\",\r\n    measurementId: \"G-KS78HV5SZT\"\r\n  };\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();\r\nexport const storage = firebase.storage();\r\nexport const storageRef = storage.ref();","import React from 'react';\r\n\r\nconst Article = ({ titre, lien, from, date }) => {\r\n    return (\r\n        <article>\r\n            <h1>{titre.split('[')[2].split(']]>')[0]} issu de {from}</h1>\r\n            <a href={lien} target=\"_blank\" rel=\"noopener noreferrer\">Voir Article</a>\r\n            <p>Publi√© le {date}</p>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Article;","import React, { useState, useEffect } from 'react';\nimport { db } from './services/firebase'\nimport './App.css';\nimport Article from './components/Article';\n\nfunction App() {\n  const [articles, setArticles] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"rss\").get().then((querySnapshot) => {\n\n      querySnapshot.forEach((doc) => {\n        const { lien, nom } = doc.data()\n\n        const RSS_URL = lien;\n        fetch(RSS_URL)\n          .then(response => response.text())\n          .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n          .then(data => {\n            const items = data.querySelectorAll(\"item\");\n            items.forEach(item => {\n              const titre = item.querySelector(\"title\").innerHTML\n              const lien = item.querySelector(\"link\").innerHTML\n              const date = item.querySelector(\"pubDate\").innerHTML\n              setArticles(oldArray => [...oldArray, {titre, lien, nom, date}]);\n            })\n          })\n      });\n    });\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Sources Storage</h1>\n      {articles.map((article, i ) => {\n        const { titre, lien, nom, date } = article\n        return <Article key={i} titre={titre} lien={lien} from={nom} date={date} ></Article>\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}