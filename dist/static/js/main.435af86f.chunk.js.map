{"version":3,"sources":["services/firebase.js","components/Article/Article.js","components/ArticleSkeleton/ArticleSkeleton.js","components/ArticlesList/ArticlesList.js","components/Inputs/Inputs.js","routes/PublicRoute.js","components/FeedPage/FeedPage.js","components/RessourcesPage/RessourcesPage.js","PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","Article","storage","ref","titre","lien","from","date","useState","time","setTime","open","setOpen","useLayoutEffect","newDate","Date","dd","getDate","slice","mm","getMonth","yyyy","getFullYear","className","onMouseUp","e","window","currentTarget","classList","remove","onMouseDown","add","onMouseLeave","style","alignSelf","text","title","split","err","count","isBig","result","map","word","length","join","trim","formatedText","ArticleSkeleton","class","ArticlesList","articles","setArticles","articlesSkeleton","setArticlesSkeleton","skelEnabled","setSkelEnabled","useEffect","i","oldArray","collection","onSnapshot","querySnapshot","forEach","doc","data","nom","fetch","then","response","str","DOMParser","parseFromString","items","querySelectorAll","item","querySelector","innerHTML","key","article","Inputs","state","setState","inputsState","setInputsState","handleChange","target","name","value","type","onChange","placeholder","onClick","parser","validator","Promise","resolve","reject","request","XMLHttpRequest","onload","xmlDoc","this","send","isFeedValid","JSON","parse","alert","obj","newtab","checkEmpty","PublicRoute","Component","component","authenticated","rest","render","props","to","pathname","FeedPage","RessourcesPage","PageNotFound","width","height","display","alignItems","justifyContent","marginTop","App","setAuthenticated","onAuthStateChanged","user","exact","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4YAYAA,IAASC,cAVI,CACTC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGCT,IAASU,KAAtB,IACMC,EAAKX,IAASY,YC8DZC,GD7DQb,IAASc,UACEC,M,MCblB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAAW,EACrBC,mBAAS,IADY,mBACtCC,EADsC,KAChCC,EADgC,OAErBF,oBAAS,GAFY,mBAEtCG,EAFsC,KAEhCC,EAFgC,KAG7CC,2BAAgB,WAEZ,IAAMC,EAAU,IAAIC,KAAKR,GAEnBS,GADQ,IAAID,MACN,IAAMD,EAAQG,WAAWC,OAAO,IACtCC,GAAM,KAAOL,EAAQM,WAAa,IAAIF,OAAO,GAC7CG,EAAOP,EAAQQ,cACrBZ,EAAQ,GAAD,OAAIM,EAAJ,YAAUG,EAAV,YAAgBE,MAGxB,IA6CH,OACI,6BAASE,UAAU,UAAUC,UAjBb,SAACC,GAEbd,IACAe,OAAOf,KAAKN,EAAM,UAClBoB,EAAEE,cAAcC,UAAUC,OAAO,kBAagBC,YATxC,SAACL,GACdb,GAAQ,GACRa,EAAEE,cAAcC,UAAUG,IAAI,iBAO8CC,aAL5D,SAACP,GACjBb,GAAQ,GACRa,EAAEE,cAAcC,UAAUC,OAAO,kBAI7B,0BAAMI,MAAO,CAAEC,UAAW,eAA1B,UACA,uBAAGX,UAAU,gBA9CA,SAACY,GAClB,IAAIC,EAAQ,GACZ,IACIA,GAASD,EAAKE,MAAM,KAAK,GAAGA,MAAM,OAAO,GAE7C,MAAOC,GACHF,GAASD,EAEb,IAAII,EAAQ,EACRC,GAAQ,EAENC,EAASL,EAAMC,MAAM,KAAKK,KAAI,SAAAC,GAEhC,IADAJ,GAASI,EAAKC,OAAS,IACV,IACT,OAAOD,EAGPH,GAAQ,KAEbK,KAAK,KAAKC,OACb,OAAIN,EACOC,EAAS,MAETA,EAuBsBM,CAAa3C,IAE1C,0BAAM6B,MAAO,CAAEC,UAAW,aAA1B,UACA,yBAAKX,UAAU,kBACX,2BAAIjB,GACJ,2BAAIG,OCtDLuC,G,YAZS,WACpB,OACI,6BAASzB,UAAU,oBACf,yBAAK0B,MAAM,cACP,0BAAMA,MAAM,iBACZ,0BAAMA,MAAM,kBACZ,0BAAMA,MAAM,qBCsDbC,EAzDM,WAAO,IAAD,EACO1C,mBAAS,IADhB,mBAClB2C,EADkB,KACRC,EADQ,OAEuB5C,mBAAS,IAFhC,mBAElB6C,EAFkB,KAEAC,EAFA,OAGa9C,oBAAS,GAHtB,mBAGlB+C,EAHkB,KAGLC,EAHK,KAwCzB,OApCAC,qBAAU,WAER,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBJ,GAAoB,SAAAK,GAAQ,4BAAQA,GAAR,CAAkB,kBAAC,EAAD,WAEhD5D,EAAG6D,WAAW,OAAOC,YAAW,SAACC,GAE/BV,EAAY,IAEZU,EAAcC,SAAQ,SAACC,GAAS,IAAD,EACPA,EAAIC,OAAlB5D,EADqB,EACrBA,KAAM6D,EADe,EACfA,IAGdC,MADgB,uCAAyC9D,GAEtD+D,MAAK,SAAAC,GAAQ,OAAIA,EAASlC,UAC1BiC,MAAK,SAAAE,GAAG,OAAI,IAAI5C,OAAO6C,WAAYC,gBAAgBF,EAAK,eACxDF,MAAK,SAAAH,GACJ,IAAMQ,EAAQR,EAAKS,iBAAiB,QAEhCnB,GACFC,GAAe,GAGjBiB,EAAMV,SAAQ,SAAAY,GAEZ,IAAMvE,EAAQuE,EAAKC,cAAc,SAASC,UACpCxE,EAAOsE,EAAKC,cAAc,QAAQC,UAClCtE,EAAOoE,EAAKC,cAAc,WAAWC,UAE3CzB,GAAY,SAAAO,GAAQ,4BAAQA,GAAR,CAAkB,CAAEvD,QAAOC,OAAM6D,MAAK3D,2BAKnE,IAGD,yBAAKgB,UAAU,YACZgC,EACGF,EAAiBX,KAAI,SAACjB,EAAGiC,GACzB,OAAO,kBAAC,WAAD,CAAUoB,IAAKpB,GACnBjC,MAGH0B,EAAST,KAAI,SAACqC,EAASrB,GAAO,IACtBtD,EAA2B2E,EAA3B3E,MAAOC,EAAoB0E,EAApB1E,KAAM6D,EAAca,EAAdb,IAAK3D,EAASwE,EAATxE,KAC1B,OAAO,kBAAC,EAAD,CAASuE,IAAKpB,EAAGtD,MAAOA,EAAOC,KAAMA,EAAMC,KAAM4D,EAAK3D,KAAMA,S,gBCgD9DyE,G,MArGA,WAAO,IAAD,EACSxE,mBAAS,CAC/BH,KAAM,GACN6D,IAAK,KAHQ,mBACVe,EADU,KACHC,EADG,OAKqB1E,mBAAS,CAC3CH,MAAM,EACN6D,KAAK,IAPQ,mBAKViB,EALU,KAKGC,EALH,KAST/E,EAAe4E,EAAf5E,KAAM6D,EAASe,EAATf,IAiERmB,EAAe,SAAC5D,GAClB2D,EAAe,CACX/E,MAAM,EACN6D,KAAK,IAETgB,EAAS,2BACFD,GADC,kBAEHxD,EAAE6D,OAAOC,KAAO9D,EAAE6D,OAAOE,UAKlC,OACI,yBAAKjE,UAAU,UACX,6BAEI,2BAAOA,UAAW4D,EAAY9E,KAAO,QAAU,KAAMoF,KAAK,OAAOF,KAAK,OAAOG,SAAUL,EAAcM,YAAY,YAAYH,MAAOnF,KAExI,6BAEI,2BAAOkB,UAAW4D,EAAYjB,IAAM,QAAU,KAAMuB,KAAK,OAAOF,KAAK,MAAMG,SAAUL,EAAcM,YAAY,YAASH,MAAOtB,KAEnI,4BAAQ0B,QAvDI,WAEZX,EAAM5E,KAAKuC,OAAS,GAAKqC,EAAMf,IAAItB,OAAS,EAhChC,SAACvC,GAEjB,IAAMwF,EAAS,IAAItB,UACbuB,EAAY,4FAAuFzF,EAAvF,kBAClB,OAAO,IAAI0F,SAAQ,SAACC,EAASC,GACzB,IAAIC,EAAU,IAAIC,eAClBD,EAAQvF,KAAK,MAAOmF,GAAW,GAC/BI,EAAQE,OAAS,WACb,IAAMC,EAASR,EAAOrB,gBAAgB8B,KAAKjC,SAAU,YAEf,OAAtCgC,EAAOzB,cAAc,aACfoB,EAAQK,EAAOzB,cAAc,YAAYC,WACzCmB,EAAQ,UAElBE,EAAQK,UAmBRC,CAAYnG,GACP+D,MAAK,SAAC3B,GACCgE,KAAKC,MAAMjE,IAEX1C,EAAG6D,WAAW,OAAO7B,IAAI,CACrB1B,OACA6D,QAEJgB,EAAS,2BACFD,GADC,IAEJ5E,KAAM,GACN6D,IAAK,MAETyC,MAAM,wBAGNvB,EAAe,CACX/E,MAAM,EACN6D,KAAK,IAGTyC,MAAM,2BAMfvB,EA1CQ,SAACwB,GAChB,IAAIC,EAAS,CAACD,EAAIvG,KAAMuG,EAAI1C,KAS5B,OARA2C,EAAO9C,SAAQ,SAACtC,EAAGiC,GACE,IAAbjC,EAAEmB,OACFiE,EAAOnD,IAAK,EAGZmD,EAAOnD,IAAK,KAGb,CAACrD,KAAMwG,EAAO,GAAI3C,IAAK2C,EAAO,IAgCfC,CAAW7B,MAyBC,uC,eC7FnC,SAAS8B,EAAT,GAAwE,IAAtCC,EAAqC,EAAhDC,UAAsBC,EAA0B,EAA1BA,cAAkBC,EAAQ,6CAC5E,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAACC,GAAD,OAA6B,IAAlBH,EACf,kBAACF,EAAcK,GACf,kBAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,e,YCErBC,G,MATE,WACb,OACI,6BAASjG,UAAU,YACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDGkG,EAPQ,WACnB,OACI,6BAASlG,UAAU,oBCaZmG,EAfM,WACjB,OACI,yBAAKzF,MAAO,CACR0F,MAAM,OACNC,OAAO,OACPC,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfC,UAAU,SAEV,2FCiCGC,MA9Bf,WAAgB,IAAD,EAC6BzH,oBAAS,GADtC,mBACN0G,EADM,KACSgB,EADT,KAUb,OAPAzE,qBAAU,WACR3D,iBAAOqI,oBAAmB,SAACC,GACrBA,GACFF,GAAiB,QAGpB,IAED,oCACE,yBAAK3G,UAAU,OACb,gCACE,4DAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACwF,EAAD,CAAasB,OAAK,EAACC,KAAK,IAAIpB,cAAeA,EAAeD,UAAWO,IACrE,kBAACT,EAAD,CAAauB,KAAK,QAAQpB,cAAeA,EAAeD,UAAWO,IACnE,kBAACT,EAAD,CAAauB,KAAK,cAAcpB,cAAeA,EAAeD,UAAWQ,IACzE,kBAACV,EAAD,CAAauB,KAAK,IAAIpB,cAAeA,EAAeD,UAAWS,QCxBrDa,QACW,cAA7B7G,OAAO8G,SAASC,UAEe,UAA7B/G,OAAO8G,SAASC,UAEhB/G,OAAO8G,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAAQwB,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.435af86f.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyAcvn9Ovp6VDSDMW8WiXu27hzvdgZIuh3U\",\r\n    authDomain: \"sources-storage.firebaseapp.com\",\r\n    databaseURL: \"https://sources-storage.firebaseio.com\",\r\n    projectId: \"sources-storage\",\r\n    storageBucket: \"sources-storage.appspot.com\",\r\n    messagingSenderId: \"662099457205\",\r\n    appId: \"1:662099457205:web:ef77f8dd882d1539cc3afc\",\r\n    measurementId: \"G-KS78HV5SZT\"\r\n  };\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();\r\nexport const storage = firebase.storage();\r\nexport const storageRef = storage.ref();","import React, { useLayoutEffect, useState } from 'react';\r\nimport './Article.css'\r\n\r\nconst Article = ({ titre, lien, from, date }) => {\r\n    const [time, setTime] = useState(\"\")\r\n    const [open, setOpen] = useState(false)\r\n    useLayoutEffect(() => {\r\n        //Formatage de la date de publication\r\n        const newDate = new Date(date)\r\n        const today = new Date()\r\n        const dd = ('0' + newDate.getDate()).slice(-2)\r\n        const mm = ('0' + (newDate.getMonth() + 1)).slice(-2)\r\n        const yyyy = newDate.getFullYear()\r\n        setTime(`${dd}/${mm}/${yyyy}`)\r\n\r\n\r\n    }, [])\r\n\r\n    const formatedText = (text) => {\r\n        let title = \"\"\r\n        try {\r\n            title += text.split('[')[2].split(']]>')[0]\r\n        }\r\n        catch (err) {\r\n            title += text\r\n        }\r\n        let count = 0\r\n        let isBig = false\r\n\r\n        const result = title.split(\" \").map(word => {\r\n            count += word.length + 1\r\n            if (count <= 100) {\r\n                return word\r\n            }\r\n            else {\r\n                isBig = true\r\n            }\r\n        }).join(' ').trim()\r\n        if (isBig) {\r\n            return result + \"...\"\r\n        } else {\r\n            return result\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        //Ouvre le lien dans un nouvel onglet\r\n        if (open) {\r\n            window.open(lien, '_blank');\r\n            e.currentTarget.classList.remove(\"articleClick\")\r\n        }\r\n    }\r\n\r\n    const addStyle = (e) => {\r\n        setOpen(true)\r\n        e.currentTarget.classList.add(\"articleClick\")\r\n    }\r\n    const removeStyle = (e) => {\r\n        setOpen(false)\r\n        e.currentTarget.classList.remove(\"articleClick\")\r\n    }\r\n    return (\r\n        <article className=\"article\" onMouseUp={handleClick} onMouseDown={addStyle} onMouseLeave={removeStyle}>\r\n            <span style={{ alignSelf: \"flex-start\" }}>“</span>\r\n            <p className=\"article-name\">{formatedText(titre)}</p>\r\n\r\n            <span style={{ alignSelf: \"flex-end\" }}>”</span>\r\n            <div className=\"article-footer\">\r\n                <p>{from}</p>\r\n                <p>{time}</p>\r\n            </div>\r\n\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport './ArticleSkeleton.css'\r\n\r\nconst ArticleSkeleton = () => {\r\n    return (\r\n        <article className=\"article-skeleton\">\r\n            <div class=\"loaderctnr\">\r\n                <span class=\"circle first\"></span>\r\n                <span class=\"circle second\"></span>\r\n                <span class=\"circle third\"></span>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default ArticleSkeleton;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { db } from '../../services/firebase'\r\nimport Article from '../Article/Article';\r\nimport './ArticlesList.css'\r\nimport ArticleSkeleton from '../ArticleSkeleton/ArticleSkeleton';\r\n\r\nconst ArticlesList = () => {\r\n  const [articles, setArticles] = useState([]);\r\n  const [articlesSkeleton, setArticlesSkeleton] = useState([])\r\n  const [skelEnabled, setSkelEnabled] = useState(true)\r\n  useEffect(() => {\r\n    //Rajout du squelette pour les articles\r\n    for (let i = 0; i < 50; i++) {\r\n      setArticlesSkeleton(oldArray => [...oldArray, <ArticleSkeleton />]);\r\n    }\r\n    db.collection(\"rss\").onSnapshot((querySnapshot) => {\r\n      //Vide les articles\r\n      setArticles([])\r\n      //Recuperation des documents enregistés sur la bdd RSS\r\n      querySnapshot.forEach((doc) => {\r\n        const { lien, nom } = doc.data()\r\n        //Recuperation des données de chaque feed RSS\r\n        const RSS_URL = \"https://cors-anywhere.herokuapp.com/\" + lien;\r\n        fetch(RSS_URL)\r\n          .then(response => response.text())\r\n          .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\r\n          .then(data => {\r\n            const items = data.querySelectorAll(\"item\");\r\n            //Une fois la data du premier feed reçu, enlever le squelette\r\n            if (skelEnabled) {\r\n              setSkelEnabled(false)\r\n            }\r\n\r\n            items.forEach(item => {\r\n              //Recuperation du titre, du lien et de la date de publication de chaque item\r\n              const titre = item.querySelector(\"title\").innerHTML\r\n              const lien = item.querySelector(\"link\").innerHTML\r\n              const date = item.querySelector(\"pubDate\").innerHTML\r\n              //Actualisation du state\r\n              setArticles(oldArray => [...oldArray, { titre, lien, nom, date }]);\r\n            })\r\n          })\r\n      });\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"articles\">\r\n      {skelEnabled\r\n        ? articlesSkeleton.map((e, i) => {\r\n          return <Fragment key={i}>\r\n            {e}\r\n          </Fragment>\r\n        })\r\n        : articles.map((article, i) => {\r\n          const { titre, lien, nom, date } = article\r\n          return <Article key={i} titre={titre} lien={lien} from={nom} date={date} ></Article>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArticlesList;","import React, { useState, useEffect } from 'react';\r\nimport { db } from '../../services/firebase'\r\nimport './Inputs.css'\r\nconst Inputs = () => {\r\n    const [state, setState] = useState({\r\n        lien: \"\",\r\n        nom: \"\",\r\n    })\r\n    const [inputsState, setInputsState] = useState({\r\n        lien: false,\r\n        nom: false\r\n    })\r\n    const { lien, nom, } = state\r\n\r\n    const isFeedValid = (lien) => {\r\n        //Fonction qui test si un lien est un flux rss ou non\r\n        const parser = new DOMParser();\r\n        const validator = \"https://cors-anywhere.herokuapp.com/\" + `http://validator.w3.org/feed/check.cgi?url=${lien}&output=soap12`\r\n        return new Promise((resolve, reject) => {\r\n            var request = new XMLHttpRequest()\r\n            request.open('GET', validator, true)\r\n            request.onload = function () {\r\n                const xmlDoc = parser.parseFromString(this.response, \"text/xml\");\r\n                //Si le lien est valide retourne la validité du lien sinon retourne False\r\n                xmlDoc.querySelector('faultcode') === null\r\n                    ? resolve(xmlDoc.querySelector('validity').innerHTML)\r\n                    : resolve('false')\r\n            }\r\n            request.send()\r\n        })\r\n    }\r\n\r\n    const checkEmpty = (obj) => {\r\n        let newtab = [obj.lien, obj.nom]\r\n        newtab.forEach((e, i) => {\r\n            if (e.length === 0) {\r\n                newtab[i] = true\r\n\r\n            } else {\r\n                newtab[i] = false\r\n            }\r\n        })\r\n        return {lien: newtab[0], nom: newtab[1]}\r\n    }\r\n    const handleClick = () => {\r\n        //Si un des inputs est vide sort de la fonction\r\n        if (state.lien.length > 0 && state.nom.length > 0) {\r\n            isFeedValid(lien)\r\n                .then((result) => {\r\n                    if (JSON.parse(result)) {\r\n                        //Si un le lien est valide alors creer un nouveau document dans la bdd RSS\r\n                        db.collection(\"rss\").add({\r\n                            lien,\r\n                            nom\r\n                        })\r\n                        setState({\r\n                            ...state,\r\n                            lien: \"\",\r\n                            nom: \"\"\r\n                        })\r\n                        alert(\"FLUX RSS AJOUTÉ\");\r\n                    } else {\r\n\r\n                        setInputsState({\r\n                            lien: true,\r\n                            nom: false\r\n                        })\r\n\r\n                        alert(\"FLUX RSS NON VALIDE\");\r\n                    }\r\n                })\r\n            //Vide les inputs\r\n\r\n\r\n        } else setInputsState(checkEmpty(state))\r\n\r\n    }\r\n    const handleChange = (e) => {\r\n        setInputsState({\r\n            lien: false,\r\n            nom: false\r\n        })\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value,\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputs\">\r\n            <div>\r\n                {/* <label>Lien RSS</label> */}\r\n                <input className={inputsState.lien ? \"error\" : null} type=\"text\" name=\"lien\" onChange={handleChange} placeholder=\"Lien RSS \" value={lien}></input>\r\n            </div>\r\n            <div>\r\n                {/* <label>Nom du flux</label> */}\r\n                <input className={inputsState.nom ? \"error\" : null} type=\"text\" name=\"nom\" onChange={handleChange} placeholder=\"Média \" value={nom}></input>\r\n            </div>\r\n            <button onClick={handleClick}><span>+</span></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inputs;","import React from 'react';\r\nimport {\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nexport function PublicRoute({ component: Component, authenticated, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => authenticated === false\r\n        ? <Component {...props} />\r\n        : <Redirect to={{ pathname: \"/feed\" }} />}\r\n    />\r\n  )\r\n}","import React from 'react';\r\nimport './FeedPage.css'\r\nimport Inputs from '../Inputs/Inputs';\r\nimport ArticlesList from '../ArticlesList/ArticlesList';\r\n\r\nconst FeedPage = () => {\r\n    return (\r\n        <section className=\"feedPage\">\r\n            <Inputs />\r\n            <ArticlesList />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\nconst RessourcesPage = () => {\r\n    return (\r\n        <section className=\"ressourcesPage\">\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default RessourcesPage;","import React from 'react';\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div style={{\r\n            width:\"100%\",\r\n            height:\"100%\",\r\n            display:\"flex\",\r\n            alignItems:\"center\",\r\n            justifyContent:\"center\",\r\n            marginTop:\"50px\"\r\n        }}>\r\n            <h1>Erreur 404, cette page n'existe pas ¯\\_(ツ)_/¯</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageNotFound;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport ArticlesList from './components/ArticlesList/ArticlesList';\r\nimport Inputs from './components/Inputs/Inputs';\r\nimport { PublicRoute } from './routes/PublicRoute';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport FeedPage from './components/FeedPage/FeedPage';\r\nimport { auth } from 'firebase';\r\nimport RessourcesPage from './components/RessourcesPage/RessourcesPage';\r\nimport PageNotFound from './PageNotFound';\r\n\r\nfunction App() {\r\n  const [authenticated, setAuthenticated] = useState(false)\r\n\r\n  useEffect(() => {\r\n    auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        setAuthenticated(true)\r\n      }\r\n    })\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>Welcome to Sources Storage</h1>\r\n        </header>\r\n      </div>\r\n      <Router>\r\n        <Switch>\r\n          <PublicRoute exact path=\"/\" authenticated={authenticated} component={FeedPage}></PublicRoute>\r\n          <PublicRoute path=\"/feed\" authenticated={authenticated} component={FeedPage}></PublicRoute>\r\n          <PublicRoute path=\"/ressources\" authenticated={authenticated} component={RessourcesPage}></PublicRoute>\r\n          <PublicRoute path=\"*\" authenticated={authenticated} component={PageNotFound}></PublicRoute>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}